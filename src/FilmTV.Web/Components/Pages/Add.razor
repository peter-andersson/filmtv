@page "/Add"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using FilmTV.Web.Features.Add
@using Microsoft.AspNetCore.Authorization
@using OneOf.Types

@attribute [Authorize]

@inject IAddMovie AddMovie;
@inject IAddShow AddShow;

<PageTitle>Add</PageTitle>

<h1>Add</h1>

<div class="row">
    <EditForm Model="Input" method="post" OnValidSubmit="AddNew" FormName="add">
        <DataAnnotationsValidator/>
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Url" class="form-control" autocomplete="username" aria-required="true" placeholder="https://www.themoviedb.org"/>
            <label For="@(() => Input.Url)" class="form-label">TheMovieDb url</label>
            <ValidationMessage For="() => Input.Url" class="text-danger"/>
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-lg btn-success">Add</button>
        </div>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(SuccessMessage))
    {
        <div class="mt-3 alert alert-info" role="alert">
            @SuccessMessage
            <br />
            <a href='@SuccessLink'>Edit the added item</a>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="mt-3 alert alert-danger" role="alert">@ErrorMessage</div>
    }
</div>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private string ErrorMessage { get; set; } = string.Empty;
    
    private string SuccessLink { get; set; } = string.Empty;
    
    private string SuccessMessage { get; set; } = string.Empty;

    public async Task AddNew()
    {
        var authState = await AuthenticationStateTask;
        var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrWhiteSpace(userId))
        {
            return;
        }
        
        if (RegexHelper.TMDbRegex().IsMatch(Input.Url))
        {
            var matches = RegexHelper.TMDbRegex().Match(Input.Url);

            int.TryParse(matches.Groups[2].Value, out var id);
            
            var type = matches.Groups[1].Value.ToLowerInvariant();
            var result = type switch
            {
                "movie" => await AddMovie.AddMovie(id, userId),
                "tv" => await AddShow.AddShow(id, userId),
                _ => new NotFound(),
            };
            
            result.Switch(
                response =>
                {
                    SuccessMessage = $"Added item {response.Title}";
                    SuccessLink = type switch
                    {
                        "movie" => $"/Edit/Movie/{id}",
                        "tv" => $"/Edit/Series/{id}",
                        _ => string.Empty,
                    };
                },
                notFound => ErrorMessage = "Movie or series not found",
                conflict => ErrorMessage = "Item already added"
            );

            Input.Url = string.Empty;
        }
    }
    
    private sealed class InputModel
    {
        [RegularExpression(@"^https://www.themoviedb.org/(tv|movie)/(\d+).*", ErrorMessage = "Needs to be a valid url from themoviedb.org")]
        [Required]
        [Display(Name = "TMDb URL")]
        public string Url { get; set; } = string.Empty;
    }
}