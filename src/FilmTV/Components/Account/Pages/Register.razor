@page "/Account/Register"

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using FilmTV.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger

<PageTitle>Register</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h1">Register</MudText>

    @if (Success)
    {
        <MudText Color="Color.Success">User created you can now login.</MudText>
        <MudButton Href="Account/Login" Variant="Variant.Filled" Color="Color.Success">Login</MudButton>
    }
    else
    {
        <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                                <MudTextField Label="Username"
                                              @bind-Value="Input.Username" For="@(() => Input.Username)"/>
                                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                              @bind-Value="Input.Password" For="@(() => Input.Password)" InputType="InputType.Password"/>
                                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                              @bind-Value="Input.ConfirmPassword" For="@(() => Input.ConfirmPassword)" InputType="InputType.Password"/>
                            </MudFocusTrap>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                        <MudText Color="@Color.Error">
                            @if (!string.IsNullOrEmpty(Message))
                            {
                                @Message
                            }
                            else
                            {
                                <ValidationSummary/>
                            }
                        </MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>
    }

</MudContainer>


@code {
    private IEnumerable<IdentityError>? _identityErrors;

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    [SupplyParameterFromForm] public InputModel Input { get; set; } = new();

    private bool Success { get; set; } = false;

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");
        // FIXME: Redirect to Login page...
        Success = true;
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    public sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}